---
import {
  Container,
  Divider,
  ExternalLinkIcon,
  Link,
  Pagination,
} from "@/components";
import { LayoutDefault } from "@/layout";
import { getPagination } from "@/lib/collections";

import type { Meta } from "@/content.config";
import { site } from "@/constants";
import type { CachedBookmarkData } from "@/lib/raindrop";
import { Image } from "astro:assets";

interface Props {
  entries: CachedBookmarkData[];
  collection: string;
  page: number;
  entriesPerPage: number;
  isIndex: boolean;
  meta: Meta;
}

const { entries, page, entriesPerPage, isIndex, meta, collection } =
  Astro.props;

const { currentPage, paginatedEntries, totalPages } = getPagination({
  isIndex,
  entries: entries.sort((a, b) => a.title.localeCompare(b.title)),
  page,
  entriesPerPage,
});
---

<LayoutDefault {...meta} type="article">
  <h1>
    {site.pages.bookmarks.title} Â· <span
      >{collection.replaceAll(/[.-]/g, " ")}</span
    >
  </h1>
  <p class="text-muted/90">
    La coleccion <span class="text-muted font-medium"
      >{collection.replaceAll(/[.-]/g, " ")}</span
    > contiene <span class="text-muted font-medium">{entries.length}</span> elementos.
  </p>
  <Divider />

  {
    entries.length === 0 ? (
      <p class="text-muted text-center">No hay elementos para mostrar.</p>
    ) : (
      <ul class="grid grid-cols-1 gap-4">
        {paginatedEntries?.map((item) => {
          return (
            <li class="w-full list-none space-y-0.5">
              <Link href={item.link} blank={true} className="group">
                <div class="flex gap-2 sm:gap-4">
                  <div class="border-divider size-full max-h-8 max-w-8 flex-shrink-0 overflow-hidden rounded-full border sm:max-h-12 sm:max-w-12">
                    {item.cover && (
                      <Image
                        src={item.cover}
                        alt={item.title}
                        class="aspect-square h-auto w-full object-cover"
                        loading="lazy"
                        width={46}
                        height={46}
                      />
                    )}
                  </div>
                  <div>
                    <div class="space-y-0.5">
                      <h2 class="group-hover:text-link flex w-full items-center gap-1 text-lg leading-tight">
                        <span class="line-clamp-1">{item.title}</span>

                        <ExternalLinkIcon className="inline-flex max-w-5 size-full" />
                      </h2>
                      {item.excerpt && (
                        <p class="text-muted mb-1.5 line-clamp-2 text-sm leading-normal">
                          {item.excerpt}
                        </p>
                      )}
                    </div>
                    {item.tags && (
                      <div class="space-x-1.5">
                        {item.tags.map((tag: string) => (
                          <span class="group-hover:!text-content bg-divider rounded-full px-1.5 py-0.5 text-xs">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </Link>
            </li>
          );
        })}
      </ul>
    )
  }
  <Container className="!p-0">
    <Pagination
      {currentPage}
      {totalPages}
      prevUrl={`/bookmarks/${collection}${currentPage - 1 !== 1 ? "/" + (currentPage - 1) : ""}/`}
      nextUrl={`/bookmarks/${collection}/${currentPage + 1}/`}
    />
  </Container>
</LayoutDefault>
