---
import {
	getAllCollectionsByCategory,
	getLastEntriesByAllCollections,
	getTagsLimitedByLetter,
	type Entry as EntryType,
} from "@/lib/collections";
import { site } from "@/constants";
import { Divider, EntriesList, Entry, ExternalLinkIcon, Link, Tag } from "@/components";
import { LayoutDefault } from "@/layout";
import { getLatestReading } from "@/lib/raindrop";

const meta = site.pages.home;
const tags = await getTagsLimitedByLetter(1);
const latests = await getLastEntriesByAllCollections();
const collections = await getAllCollectionsByCategory();
const LIMIT_BOOKMARKS = 5;
const bookmarks = await getLatestReading(LIMIT_BOOKMARKS);
const latestBookmarks = bookmarks.map(({title, excerpt: description,created:date}) => {
	return {
		data: {
			title,
			description,
			date
		},
	} as unknown as EntryType;
});



---

<LayoutDefault {...meta} type="main">
	<div>
		<h1>ansango</h1>
		<p>
			Hola, soy <span class="font-medium">AnÃ­bal Santos</span> ðŸ‘‹, escribo
			sobre tecnologÃ­a, trabajo como Tech Lead en <Link
				className="font-medium underline underline-offset-2 external-link inline-flex items-center"
				href="https://innusual.tech"
				blank
				>innusual <ExternalLinkIcon/>
			</Link>. AquÃ­ encontrarÃ¡s parte de mis wikis, insights, y algunos
			hacks.
		</p>
		{latests.length > 0 && (
			<section class="group">
				<h2 class="font-medium text-muted">Ãšltima publicaciÃ³n</h2>
				<div>
					{
						latests.map((latest) => {
							const isIndex = Boolean((latest.data as any).index);
							return (
								<a
									href={
										`/${latest.collection}` +
										(isIndex ? "" : `/${latest.id}`)
									}
									class="space-y-1"
								>
									<Entry entry={latest} />
								</a>
							);
						})
					}
				</div>
				<Divider />
			</section>
		)}

			{
				tags.length > 0 && (
					<section>
						<h2 class="font-medium text-muted">
							<a href="/tags">Tags</a>
						</h2>

						<ul class="flex flex-wrap gap-1">
							{tags.map((tag, i) => {
								return (
									<li class="flex list-none">
										<Tag href={`/tags/${tag}`}>
											{tag.replace(/-/g, " ")}
										</Tag>
										{i !== tags.length - 1 && (
											<span class="text-muted">,</span>
										)}
									</li>
								);
							})}
						</ul>
						<Divider />
					</section>
				)
			}

			<section>
					<h2 class="font-medium text-muted">
						<a href="/bookmarks">Bookmarks</a> & <a href="/reading">Reading</a>
					</h2>
					<EntriesList entries={latestBookmarks} />
					{ latestBookmarks.length >= LIMIT_BOOKMARKS && (
						<span class="block mt-4 text-sm">
							<a href="/reading">
								Ver todos los enlaces â†’
							</a>
						</span>
					)}
				<Divider />
				</section>

			{
				Object.entries(collections).map(([collection, entries]) => {
					const slicedEntries = entries.slice(0, meta.entriesPerPage);
					const collectionlink = `/${collection}`;

					const isOnlyOnePage =
						entries.length === 1 && (entries[0].data as any).index === true;

					if (isOnlyOnePage) {
						return <></>;
					}
					
					return (
						<section>
							<h2 class="font-medium text-muted">
								<a class="capitalize" href={collectionlink}>
									{collection}
								</a>
							</h2>
							<EntriesList entries={slicedEntries} />
							{entries.length > (meta.entriesPerPage || 0) && (
								<span class="block mt-4 text-sm">
									<a href={collectionlink}>
										Ver todas las publicaciones â†’
									</a>
								</span>
							)}
						</section>
					);
				})
			}
		</div>
	</div>
</LayoutDefault>
